"""
python payload_gen.py --type sqli --encode none
python payload_gen.py --type sqli --encode url
python payload_gen.py --type sqli --encode base64
python payload_gen.py --type sqli --encode hex 
python payload_gen.py --type xss --encode none
encode ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤
"""

import argparse      # ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ argument ‡∏à‡∏≤‡∏Å command line ‡πÄ‡∏ä‡πà‡∏ô --type, --encode
import json          # ‡πÉ‡∏ä‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå .json ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö payload
import random        # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏° payload ‡∏à‡∏≤‡∏Å list
import os            # ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
from utils.encoder import encode_payload  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå encoder.py

def load_payloads(payload_type):
    filename = f"payloads/{payload_type}.json"  # ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó xss ‡∏´‡∏£‡∏∑‡∏≠ sqli
    if not os.path.exists(filename):
        raise FileNotFoundError(f"[!] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {filename}")  # ‡πÅ‡∏à‡πâ‡∏á error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏¢
    with open(filename, "r", encoding="utf-8") as f:
        payloads = json.load(f)  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å .json ‚Üí ‡πÄ‡∏õ‡πá‡∏ô list ‡πÉ‡∏ô Python
    return payloads

def display_payload(payload, output_file=None):
    print(f"\n[üéØ Payload ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô]\n{payload}\n")  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô terminal
    if output_file:
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(payload)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å payload ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .txt
        print(f"[üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå]: {output_file}")

def main():
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á parser ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö argument ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    parser = argparse.ArgumentParser(description="üî• Payload Generator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XSS / SQLi")

    # ‡∏£‡∏±‡∏ö argument --type (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å)
    parser.add_argument("--type", choices=["xss", "sqli"], required=True,
                        help="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó payload ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á (xss ‡∏´‡∏£‡∏∑‡∏≠ sqli)")

    # ‡∏£‡∏±‡∏ö argument --encode (‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ default ‡πÄ‡∏õ‡πá‡∏ô none)
    parser.add_argument("--encode", choices=["base64", "url", "hex", "none"], default="none",
                        help="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ payload")

    # ‡∏£‡∏±‡∏ö argument --output (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
    parser.add_argument("--output",
                        help="‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å payload ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå .txt")

    # ‡πÅ‡∏õ‡∏•‡∏á argument ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ args
    args = parser.parse_args()

    try:
        payloads = load_payloads(args.type)  # ‡πÇ‡∏´‡∏•‡∏î payload ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    except FileNotFoundError as e:
        print(e)
        return  # ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏¢

    selected = random.choice(payloads)  # ‡∏™‡∏∏‡πà‡∏° 1 payload ‡∏à‡∏≤‡∏Å list

    if args.encode != "none":
        final_payload = encode_payload(selected, args.encode)  # ‡πÅ‡∏õ‡∏•‡∏á encode ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    else:
        final_payload = selected  # ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "none"

    display_payload(final_payload, args.output)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå

if __name__ == "__main__":
    main()
